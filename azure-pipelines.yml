trigger:
  branches:
    include:
     - feature
     - master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  dockerRegistryServiceConnection: 'DockerRegistry'  # Replace with your Docker registry service connection name
  imageRepository: 'tomcat-test'
  namespace: 'sanghamitra'
stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool: Default
    steps:
#############################

# Packaging the Code

#############################
    - task: Maven@4
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
      displayName: 'Maven Build'

#############################

# Build and Push Image to DockerHub
 
#############################
    # - task: Docker@2
    #   displayName: 'Build and Push Docker Image'
    #   inputs:
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     repository: 'riaoct30/$(imageRepository)'
    #     command: 'buildAndPush'
    #     Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
          # tags: |
          # $(tag)

#############################

# Build and Push Image to ACR
 
#############################
    # - task: Docker@2
    #   displayName: Docker Build&Push
    #   inputs:
    #     containerRegistry: 'Contregsanga'
    #     repository: 'tomcat-test'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
      # retryCountOnTaskFailure: 3
    
    
#############################

# Download and Install Aquasec Trivy
 
#############################
    # - task: CmdLine@2
    #   displayName: Download and Install Aquasec Trivy
    #   inputs:
    #     script: |
    #       sudo apt-get install wget apt-transport-https gnupg lsb-release
    #       wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
    #       echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
    #       sudo apt-get update
    #       sudo apt-get install trivy
    #       trivy -v
    #       pwd

############################

# Execute Trivy Scan and Copy the Scan Results in Artifacts Staging Directory
 
############################
    # - task: CmdLine@2
    #   displayName: Run AquaSec Trivy Scan and Copy to Artifacts Staging Directory
    #   inputs:
    #     script: | 
    #       trivy image $(dockerRegistryServiceConnection)/$(imageRepository):$(tag)
    #       trivy image --exit-code 0 --severity LOW,MEDIUM $(dockerRegistryServiceConnection)/$(imageRepository):$(tag) > low-med.txt
    #       trivy image --exit-code 1 --severity HIGH,CRITICAL $(dockerRegistryServiceConnection)/$(imageRepository):$(tag) > high-critical.txt
    #       ls -l
          
#############################

# Installing Helm and Kubernetes
 
#############################

    - task: HelmInstaller@0
      displayName: Install Helm and Kubernetes
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
        # script: |
          # sudo apt install kubectl kubeadm kubelet kubernetes-cni -y

#############################

# Deploying Helm
 
#############################
    # - task: HelmDeploy@0
    #   displayName: 'Helm Charts Display'
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceConnection: 'kubeclust'
    #     namespace: 'sanghamitra'
    #     command: 'list'
    #     canaryImage: true
    
#############################

# Using Help to Deploy to AKS cluster
 
#############################
    # - task: HelmDeploy@0
    #   displayName: 'Helm Artifact creation'
    #   inputs:
    #     connectionType: 'Kubernetes Service Connection'
    #     kubernetesServiceConnection: 'kubeclust'
    #     namespace: 'sanghamitra'
    #     command: 'upgrade'
    #     chartType: 'FilePath'
    #     chartPath: '$(System.DefaultWorkingDirectory)/**/*.tgz'
    #     chartVersion: '1.0'
    #     releaseName: 'hello-world'
    #     arguments: '--set image.repository=$(imageRepository) --set image.tag=$(tag)'
#############################

# Installing Kubectl on Agent Machine

#############################
    # - task: KubectlInstaller@0
    #   inputs:
    #     kubectlVersion: 'latest'
    #     script: |
    #       kubectl get nodes


#############################

# Connecting to AKS Cluster
 
#############################
    # - task: KubernetesManifest@1
    #   inputs:
    #     action: 'deploy'
    #     connectionType: 'kubernetesServiceConnection'
    #     kubernetesServiceConnection: 'kubeclust'
    #     namespace: 'sanghamitra'
    #     manifests: |
    #      deployment.yaml
    #      service.yaml

#############################

# Deploy to AKS Cluster
 
#############################
    - task: KubernetesManifest@1
      displayName: 'Deploy to AKS Cluster'
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'kubeclust'
        namespace: $(namespace)
        strategy: 'canary'
        percentage: '0'
        manifests: 'deployment.yaml'
  
#############################

# Kubectl Installer
 
#############################
    - task: KubectlInstaller@0
      displayName: 'Install Kubectl'
      inputs:
        kubectlVersion: 'latest'

#############################

# Kubectl Apply

#############################
 
    - task: Kubernetes@1
      displayName: 'Kubectl Apply'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'kubeclust'
        namespace: $(namespace)
        secretType: 'dockerRegistry'
        containerRegistryType: 'Container Registry'
        dockerRegistryEndpoint: 'DockerRegistry'
        script: |
          'kubectl apply -f deployment.yaml -n $(namespace)'
          'kubectl get deployments -n $(namespace)'
          'kubectl get pods -n $(namespace)'